from datetime import datetime

from aiogram import types, Router, F
from aiogram.filters.command import Command
from aiogram.fsm.context import FSMContext

from tgbot.keyboards.main_kb import main_kb_builder
from tgbot.keyboards.gender_kb import gender_kb
from tgbot.keyboards.skin_type_kb import skin_type_kb, generate_new_kb
from tgbot.models.db_commands import save_client
from tgbot.states.client_add_states import ClientAdd
from tgbot.misc.funcs import validate_date, summarizing_data

router = Router()


@router.message(Command('start'))
async def cmd_start(message: types.Message):
    await message.answer('–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, <b>–ù–∞—Ç–∞–ª—å—è</b>üë©‚Äç‚öïÔ∏è\n\n–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–≥–æ –±–æ—Ç–∞! ‚ù§Ô∏è',
                         reply_markup=main_kb_builder.as_markup(resize_keyboard=True))


@router.message(Command('cancel'))
async def cmd_cancel(message: types.Message, state: FSMContext):
    await state.clear()
    await message.answer('–û—Ç–º–µ–Ω–µ–Ω–æ', reply_markup=main_kb_builder.as_markup(resize_keyboard=True))


@router.message(F.text == '–î–æ–±–∞–≤–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞')
async def add_client(message: types.Message, state: FSMContext):
    await message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –§–ò–û –∫–ª–∏–µ–Ω—Ç–∞')
    await state.set_state(ClientAdd.FIO)


@router.message(ClientAdd.FIO)
async def client_fio(message: types.Message, state: FSMContext):
    await state.update_data(FIO=message.text)
    await message.answer('–û—Ç–ª–∏—á–Ω–æ, —Ç–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª –í–∞—à–µ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞!',
                         reply_markup=gender_kb.as_markup())
    await state.set_state(ClientAdd.gender)


@router.callback_query(ClientAdd.gender)
async def client_gender(callback_query: types.CallbackQuery, state: FSMContext):
    await state.update_data(gender=callback_query.data)
    await state.set_state(ClientAdd.age)
    await callback_query.message.answer('–ù–∞–ø–∏—à–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ 01.01.2000')
    await callback_query.answer()


@router.message(ClientAdd.age)
async def client_age(message: types.Message, state: FSMContext):
    if validate_date(message.text):
        await state.update_data(age=datetime.strptime(message.text, '%d.%m.%Y').date())
        await state.set_state(ClientAdd.mobile)
        await message.answer('–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∫–ª–∏–µ–Ω—Ç–∞! ‚òéÔ∏è')
    else:
        await message.answer('–í–≤–µ–¥–µ–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –í–≤–µ–¥–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –í–∞—à–µ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞!')


@router.message(ClientAdd.mobile)
async def client_mobile(message: types.Message, state: FSMContext):
    await state.update_data(mobile_phone=message.text)
    await state.set_state(ClientAdd.skin_type)
    mes = await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∫–æ–∂–∏/—Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ–∂–∏ –∫–ª–∏–µ–Ω—Ç–∞!',
                               reply_markup=skin_type_kb.as_markup())
    await state.update_data(msg=mes)


@router.callback_query(ClientAdd.skin_type)
async def client_skin_type(callback_query: types.CallbackQuery, state: FSMContext):
    user_data = await state.get_data()

    if user_data.get('skin_type', False) and callback_query.data != '–ó–∞–∫–æ–Ω—á–∏—Ç—å':
        new_data = user_data['skin_type'] + ' ' + callback_query.data
        await state.update_data(skin_type=new_data)

    if callback_query != '–ó–∞–∫–æ–Ω—á–∏—Ç—å':
        user_data = await state.get_data()
        try:
            skin_type = user_data['skin_type'].split(' ')
            text = f'–í–∞—à –≤—ã–±–æ—Ä: {", ".join(skin_type)}'
            new_kb = await generate_new_kb(skin_type_kb, skin_type)
            await callback_query.message.edit_text(text=text, inline_message_id=user_data['msg'].message_id)
            await callback_query.message.edit_reply_markup(reply_markup=new_kb.as_markup())
        except KeyError:
            await state.update_data(skin_type=callback_query.data)
            user_data = await state.get_data()
            skin_type = user_data['skin_type'].split(' ')
            text = f'–í–∞—à –≤—ã–±–æ—Ä: {user_data["skin_type"]}'
            new_kb = await generate_new_kb(skin_type_kb, skin_type)
            await callback_query.message.edit_text(text=text, inline_message_id=user_data['msg'].message_id)
            await callback_query.message.edit_reply_markup(reply_markup=new_kb.as_markup())

    if callback_query.data == '–ó–∞–∫–æ–Ω—á–∏—Ç—å':
        user_data = await state.get_data()
        await callback_query.message.edit_text(text='–í–∞—à –≤—ã–±–æ—Ä —Å–æ—Ö—Ä–∞–Ω–µ–Ω ‚úÖ\n\n'
                                                    '–£–∫–∞–∂–∏—Ç–µ –µ—Å—Ç—å –ª–∏ —Ö—Ä–æ–Ω–∏—á–µ—Å–∫–∏–µ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏—è —É –∫–ª–∏–µ–Ω—Ç–∞?'
                                                    ' –ï—Å–ª–∏ –¥–∞, —Ç–æ –∫–∞–∫–∏–µ? ü§í',
                                               inline_message_id=user_data['msg'].message_id)
        await state.set_state(ClientAdd.chronic_diseases)


@router.message(ClientAdd.chronic_diseases)
async def client_chronic_diseases(message: types.Message, state: FSMContext):
    await state.update_data(chronic_diseases=message.text)
    await message.answer('–ü—Ä–µ–∫—Ä–∞—Å–Ω–æ! –£—Ç–æ—á–Ω–∏—Ç–µ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –ª–∏ –∫–ª–∏–µ–Ω—Ç –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–µ –ø—Ä–µ–ø–∞—Ä–∞—Ç—ã –∏ –∫–∞–∫–∏–µ? üíä')
    await state.set_state(ClientAdd.medication)


@router.message(ClientAdd.medication)
async def client_medication(message: types.Message, state: FSMContext):
    await state.update_data(medication=message.text)
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é üìù.')
    await state.set_state(ClientAdd.notes)


@router.message(ClientAdd.notes)
async def client_notes(message: types.Message, state: FSMContext):
    await summarizing_data(message, state)


@router.callback_query(ClientAdd.summary)
async def client_agree(callback_query: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    data.pop('msg')
    if callback_query.data == 'yes':
        for key, value in data.items():
            print(f'{key} - {value}')
        await save_client(data)
        await callback_query.message.answer('–°–ø–∞—Å–∏–±–æ, –∫–ª–∏–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö!',
                                            reply_markup=main_kb_builder.as_markup(resize_keyboard=True))
        await state.clear()
