from datetime import datetime
from aiogram import types, Router, F
from aiogram.fsm.context import FSMContext

from tgbot.keyboards.main_kb import main_kb_builder
from tgbot.keyboards.notes_kb import notes_ikb, add_or_delete_note_ikb, note_what_to_change_ikb
from tgbot.keyboards.read_note_ikb import read_ikb
from tgbot.misc.funcs import validate_date
from tgbot.models.db_commands import save_visit
from tgbot.models.db_visit_commands import retrieve_note_info, get_info_about_date
from tgbot.states.note_states import NoteState
from tgbot.models.client import Visit

router = Router()


@router.callback_query(F.data == 'notes')
async def notes(callback_query: types.CallbackQuery, state: FSMContext):
    await callback_query.answer()
    data = await state.get_data()
    client_notes = await retrieve_note_info(data['fio'])
    if client_notes == '–ù–µ—Ç –∑–∞–ø–∏—Å–µ–π –æ –∫–ª–∏–µ–Ω—Ç–µ':
        await callback_query.message.answer('–ù–µ—Ç –∑–∞–ø–∏—Å–µ–π –æ –∫–ª–∏–µ–Ω—Ç–µ',
                                            reply_markup=notes_ikb.as_markup())

    else:
        client_notes = list(map(lambda client: f'{"<code>"}{client}{"</code>"}', client_notes))
        one_note = '\n'.join(client_notes)
        await callback_query.message.answer(f'–ó–∞–ø–∏—Å–∏ –∫–ª–∏–µ–Ω—Ç–∞ üìñ\n\n'
                                            f'{one_note}\n\n',
                                            reply_markup=notes_ikb.as_markup())


@router.callback_query(F.data == 'change_note_data')
async def change_note_data(callback_query: types.CallbackQuery, state: FSMContext):
    await callback_query.answer()
    await callback_query.message.answer('–ß—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∏–∑–º–µ–Ω–∏—Ç—å üëá ',
                                        reply_markup=note_what_to_change_ikb.as_markup())


@router.callback_query(F.data.in_(['procedures', 'recommendations']))
async def change_procedures_and_recommendations(callback_query: types.CallbackQuery, state: FSMContext):
    await callback_query.answer()
    if callback_query.data == 'procedures':
        await state.update_data(what_to_change='procedures')
    else:
        await state.update_data(what_to_change='recommendations')
    await callback_query.message.answer('–í—ã–±–µ—Ä–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–µ–π—Å—Ç–≤–∏–µ üëá',
                                        reply_markup=add_or_delete_note_ikb.as_markup())


@router.callback_query(F.data.in_(['delete_note', 'add_to_note']))
async def add_or_delete_note(callback_query: types.CallbackQuery, state: FSMContext):
    await callback_query.answer()
    await state.update_data(action=callback_query.data)
    await state.set_state(NoteState.note_add_or_delete)
    await callback_query.message.answer('–í–≤–µ–¥–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.')


@router.message(NoteState.note_add_or_delete)
async def note_add_or_delete(message: types.Message, state: FSMContext):
    data = await state.get_data()
    what_to_change = data['what_to_change']
    visit = await Visit.query.where(
        (Visit.date == data['date']) &
        (Visit.FIO == data['fio'])).gino.first()
    if data['action'] == 'add_to_note':
        if what_to_change == 'procedures':
            old_data = visit.procedures
            new_data = old_data + ', ' + message.text
            await visit.update(procedures=new_data).apply()
        else:
            old_data = visit.recommendations
            new_data = old_data + ', ' + message.text
            await visit.update(recommendations=new_data).apply()
    else:
        if what_to_change == 'procedures':
            await visit.update(procedures=message.text).apply()
        else:
            await visit.update(recommendations=message.text).apply()
    await message.answer('–î–∞–Ω–Ω—ã–µ –±—ã–ª–∏ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω—ã! ‚úÖ',
                         reply_markup=main_kb_builder.as_markup())


# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏
@router.callback_query(F.data == 'note_add')
async def add_note(callback_query: types.CallbackQuery | types.Message, state: FSMContext):
    await callback_query.answer()
    await state.set_state(NoteState.note_date)
    await callback_query.message.answer('–í–≤–µ–¥–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–∞—Ç—É –ø—Ä–∏–µ–º–∞ –∫–ª–∏–µ–Ω—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ 01.01.2000 ‚è±')


@router.callback_query(F.data == 'note_read')
async def open_note(callback_query: types.CallbackQuery, state: FSMContext):
    await callback_query.answer()
    await state.set_state(NoteState.note_open)
    await callback_query.message.answer('–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –ø—Ä–∏–µ–º–∞ –∫–ª–∏–µ–Ω—Ç–∞')


@router.message(NoteState.note_open)
async def note_read(message: types.Message, state: FSMContext):
    await state.update_data(date=datetime.strptime(message.text, '%Y-%m-%d'))
    data = await state.get_data()
    output_data = await get_info_about_date(data)
    await message.answer(output_data, reply_markup=read_ikb.as_markup())


@router.callback_query(F.data == 'more_note')
async def note_one_more(callback_query: types.CallbackQuery, state: FSMContext):
    await open_note(callback_query, state)


@router.callback_query(F.data == 'cancel_note')
async def cancel_note(callback_query: types.CallbackQuery, state: FSMContext):
    await callback_query.answer()
    await state.clear()
    await callback_query.message.answer('–î–æ —Å–∫–æ—Ä—ã—Ö –≤—Å—Ç—Ä–µ—á!',
                                        reply_markup=main_kb_builder.as_markup(resize_keyboard=True))


@router.message(NoteState.note_date)
async def add_note_date(message: types.Message, state: FSMContext):
    if validate_date(message.text):
        await state.update_data(date=datetime.strptime(message.text, '%d.%m.%Y'))
        await state.set_state(NoteState.note_procedures)
        await message.answer('–°–ø–∞—Å–∏–±–æ! –¢–µ–ø–µ—Ä—å —Å–æ–æ–±—â–∏—Ç–µ –∫–∞–∫–∏–µ –ø—Ä–æ—Ü–µ–¥—É—Ä—ã –ø—Ä–æ–≤–æ–¥–∏–ª–∏ —Å –∫–ª–∏–µ–Ω—Ç–æ–º? üíâ')
    else:
        await message.answer('–í—ã –≤–≤–µ–ª–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.')


@router.message(NoteState.note_procedures)
async def add_note_procedures(message: types.Message, state: FSMContext):
    await state.update_data(procedures=message.text)
    await state.set_state(NoteState.note_recommendations)
    await message.answer('–ò–º–µ—é—Ç—Å—è –ª–∏ –∫–∞–∫–∏–µ-–ª–∏–±–æ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ / –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è?')


@router.message(NoteState.note_recommendations)
async def add_note_recommendations(message: types.Message, state: FSMContext):
    await state.update_data(recommendations=message.text)
    data = await state.get_data()
    await save_visit(data)
    await message.answer('–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–ø–∏—Å–∏ –±—ã–ª–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞! ‚úÖ',
                         reply_markup=main_kb_builder.as_markup(resize_keyboard=True))
